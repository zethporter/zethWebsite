import { useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import { useForm, type SubmitHandler } from "react-hook-form";
import { useAtomValue } from "jotai";
import { atomWithStorage } from "jotai/utils";
import RowComponent from "../../components/quixx/RowComponent";
import { TransformWrapper, TransformComponent } from "react-zoom-pan-pinch";
import NegativeComponent from "../../components/quixx/NegativeComponent";
import { AdjustmentsHorizontalIcon } from "@heroicons/react/24/solid";

import Score from "../../components/quixx/Score";
import { games } from "../../components/quixx/games";
import IconModal from "../../components/quixx/IconModal";

export const markerAtom = atomWithStorage("quixMarker", {
  icon: "XMarkIcon",
  fill: "primary",
  stroke: "primary",
});

export const gameAtom = atomWithStorage("quixGame", games.main);

export type blockType = {
  color: string;
  row: number;
  num: string;
  prev: number | null;
  id: number;
  selected: boolean;
  disabled: boolean;
};

export type rowType = {
  a: blockType;
  b: blockType;
  c: blockType;
  d: blockType;
  e: blockType;
  f: blockType;
  g: blockType;
  h: blockType;
  i: blockType;
  j: blockType;
  k: blockType;
  l: blockType;
};

export type negatives = {
  first: boolean;
  second: boolean;
  third: boolean;
  fourth: boolean;
};

type FormValues = {
  red: rowType;
  yellow: rowType;
  green: rowType;
  blue: rowType;
  negatives: negatives;
};

export const rowCountsAtom = atomWithStorage("rowCountsAtom", {
  red: 0,
  yellow: 0,
  green: 0,
  blue: 0,
});

export const rowClosedAtom = atomWithStorage("rowClosedAtom", {
  red: false,
  yellow: false,
  green: false,
  blue: false,
});

const Home: NextPage = () => {
  const game = useAtomValue(gameAtom);
  const [iconModal, setIconModal] = useState(false);
  const { control, handleSubmit } = useForm<FormValues>({
    defaultValues: game,
  });

  const onSubmit: SubmitHandler<FormValues> = (data) => console.log(data);

  return (
    <>
      <Head>
        <title>Zeth | Quixx</title>
        <meta name="description" content="Generated by create-t3-app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <TransformWrapper
        disablePadding={true}
        centerOnInit={true}
        minScale={0.4}
        maxScale={3}
        doubleClick={{ disabled: true }}
      >
        <main>
          <TransformComponent
            wrapperClass="bg-base-300 p-10"
            wrapperStyle={{ height: "100dvh", width: "100%" }}
            contentClass="bg-transparent p-5"
          >
            <form
              onSubmit={handleSubmit(onSubmit)}
              className="flex h-full w-full flex-col gap-2"
            >
              <div className="flex flex-col gap-2 rounded-box bg-base-100 p-2">
                <RowComponent
                  rowKey={"red"}
                  control={control}
                  rowData={game.red}
                />
                <RowComponent
                  rowKey={"yellow"}
                  control={control}
                  rowData={game.yellow}
                />
                <RowComponent
                  rowKey={"green"}
                  control={control}
                  rowData={game.green}
                />
                <RowComponent
                  rowKey={"blue"}
                  control={control}
                  rowData={game.blue}
                />
              </div>
              <div className="flex h-20 flex-row items-center gap-2 rounded-box bg-base-200 p-2">
                <Score control={control} />
                <NegativeComponent control={control} />
                <button
                  type="button"
                  onClick={() => setIconModal(true)}
                  className="btn-xl btn btn-square btn-ghost"
                >
                  <AdjustmentsHorizontalIcon className="h-8 w-8 fill-primary" />
                </button>
              </div>
            </form>
          </TransformComponent>
          <IconModal open={iconModal} handleClose={() => setIconModal(false)} />
        </main>
      </TransformWrapper>
    </>
  );
};

export default Home;
