import react, { useEffect, useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";

import { RocketLaunchIcon, CheckIcon } from "@heroicons/react/24/solid";

import NumberBox from "../../components/quixx/NumberBox";
import Score from "../../components/quixx/Score";
import { main } from "../../components/quixx/games";

const Home: NextPage = () => {
  const [marker, setMarker] = useState(
    <RocketLaunchIcon className="text-cyan-500" />
  );
  const [selected, setSelected] = useState<number[]>([]);
  const [negatives, setNegatives] = useState<string[]>([]);
  const [gameInfo, setGameInfo] = useState(main);

  const handleNegativeCheck = (value: string) => {
    negatives.includes(value)
      ? setNegatives(negatives.filter((negative) => negative !== value))
      : setNegatives([...negatives, value]);
  };

  useEffect(() => {
    const tempInfo = gameInfo.map((item) => {
      if (selected.includes(item.id)) {
        return { ...item, selected: true };
      } else {
        return { ...item, selected: false };
      }
    });
    setGameInfo(tempInfo);
  }, [selected]);

  const disabledCheck = (id: number, row: number) => {
    let disabled = false;
    const rowValues = gameInfo.filter(
      (item) => item.row === row && item.id > id
    );
    rowValues.forEach((item) => {
      if (item.selected === true) {
        disabled = true;
      }
    });
    return disabled;
  };

  const handleBoxClick = (id: number) => {
    const tempSelected = selected.includes(id)
      ? selected.filter((item) => item !== id)
      : [...selected, id];
    setSelected(tempSelected);
  };

  return (
    <>
      <Head>
        <title>Zeth | Quixx</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="sm:min-w-screen m-0 h-full min-h-screen w-full min-w-fit flex-col bg-slate-500 p-3 sm:h-full sm:min-h-screen sm:w-full">
        <div className="my-auto mx-auto w-fit rounded bg-white/10 p-5">
          <div className="flex flex-col gap-1 overflow-x-auto rounded bg-white/80 p-5">
            <div className="flex flex-row gap-1">
              {gameInfo
                .filter((box) => box.row === 1)
                .map((item) => (
                  <NumberBox
                    disabled={
                      disabledCheck(item.id, item.row) &&
                      item.selected === false
                    }
                    key={item.id}
                    color={item.color}
                    number={item.num}
                    selected={item.selected}
                    icon={marker}
                    onClick={() => handleBoxClick(item.id)}
                  />
                ))}
            </div>
            <div className="flex flex-row gap-1">
              {gameInfo
                .filter((box) => box.row === 2)
                .map((item) => (
                  <NumberBox
                    disabled={
                      disabledCheck(item.id, item.row) &&
                      item.selected === false
                    }
                    key={item.id}
                    color={item.color}
                    number={item.num}
                    selected={item.selected}
                    icon={marker}
                    onClick={() => handleBoxClick(item.id)}
                  />
                ))}
            </div>
            <div className="flex flex-row gap-1">
              {gameInfo
                .filter((box) => box.row === 3)
                .map((item) => (
                  <NumberBox
                    disabled={
                      disabledCheck(item.id, item.row) &&
                      item.selected === false
                    }
                    key={item.id}
                    color={item.color}
                    number={item.num}
                    selected={item.selected}
                    icon={marker}
                    onClick={() => handleBoxClick(item.id)}
                  />
                ))}
            </div>
            <div className="flex flex-row gap-1">
              {gameInfo
                .filter((box) => box.row === 4)
                .map((item) => (
                  <NumberBox
                    disabled={
                      disabledCheck(item.id, item.row) &&
                      item.selected === false
                    }
                    key={item.id}
                    color={item.color}
                    number={item.num}
                    selected={item.selected}
                    icon={marker}
                    onClick={() => handleBoxClick(item.id)}
                  />
                ))}
            </div>
            <div className="m-2 flex justify-end p-1">
              <div className="col-span-4 flex flex-row gap-2 rounded-xl border border-slate-600 p-3">
                <input
                  value={"first"}
                  onChange={(e) => handleNegativeCheck(e.target.value)}
                  type="checkbox"
                  className="h-8 w-8 cursor-pointer rounded text-purple-400 focus:ring-purple-200"
                />
                <input
                  value={"second"}
                  onChange={(e) => handleNegativeCheck(e.target.value)}
                  type="checkbox"
                  className="h-8 w-8 cursor-pointer rounded text-purple-400 focus:ring-purple-200"
                />
                <input
                  value={"third"}
                  onChange={(e) => handleNegativeCheck(e.target.value)}
                  type="checkbox"
                  className="h-8 w-8 cursor-pointer rounded text-purple-400 focus:ring-purple-200"
                />
                <input
                  value={"fourth"}
                  onChange={(e) => handleNegativeCheck(e.target.value)}
                  type="checkbox"
                  className="h-8 w-8 cursor-pointer rounded text-purple-400 focus:ring-purple-200"
                />
                <svg className="h-8 w-8 stroke-purple-400 stroke-2">
                  <CheckIcon />
                </svg>
                <p className="text-3xl text-slate-700">= -5</p>
              </div>
            </div>
          </div>
          <div className="mx-auto mt-3 rounded bg-white/80 p-5">
            <Score
              scores={{
                first: gameInfo.filter(
                  (item) => item.row === 1 && item.selected === true
                ).length,
                second: gameInfo.filter(
                  (item) => item.row === 2 && item.selected === true
                ).length,
                third: gameInfo.filter(
                  (item) => item.row === 3 && item.selected === true
                ).length,
                fourth: gameInfo.filter(
                  (item) => item.row === 4 && item.selected === true
                ).length,
                negative: negatives.length,
              }}
            />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
